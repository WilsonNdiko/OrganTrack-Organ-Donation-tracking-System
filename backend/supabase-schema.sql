-- OrgFlow Supabase Database Schema
-- Run this SQL in your Supabase SQL Editor to create the organs table

-- Create organs table
CREATE TABLE IF NOT EXISTS public.organs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    token_id INTEGER UNIQUE NOT NULL,
    organ_type VARCHAR(50) NOT NULL,
    blood_type VARCHAR(10) NOT NULL,
    status VARCHAR(20) NOT NULL DEFAULT 'Donated' CHECK (status IN ('Donated', 'Transferred', 'Transplanted', 'Requested')),
    donor VARCHAR(100),
    token_uri TEXT,
    hospital VARCHAR(100),
    recipient VARCHAR(100),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Create organ requests table
CREATE TABLE IF NOT EXISTS public.organ_requests (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    request_id VARCHAR(20) UNIQUE NOT NULL,
    organ_id INTEGER NOT NULL REFERENCES public.organs(token_id) ON DELETE CASCADE,
    requesting_hospital VARCHAR(100) NOT NULL,
    owning_hospital VARCHAR(100) DEFAULT 'General Hospital',
    status VARCHAR(20) NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'accepted', 'rejected')),
    requester_address VARCHAR(100),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Create updated_at trigger
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER organs_updated_at
    BEFORE UPDATE ON public.organs
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_updated_at();

CREATE TRIGGER organ_requests_updated_at
    BEFORE UPDATE ON public.organ_requests
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_updated_at();

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS organs_token_id_idx ON public.organs(token_id);
CREATE INDEX IF NOT EXISTS organs_status_idx ON public.organs(status);
CREATE INDEX IF NOT EXISTS organs_created_at_idx ON public.organs(created_at DESC);

-- Enable Row Level Security (RLS)
ALTER TABLE public.organs ENABLE ROW LEVEL SECURITY;

-- Create policy to allow all operations (adjust for production security)
CREATE POLICY "Enable all operations for organs" ON public.organs
    FOR ALL USING (true) WITH CHECK (true);

-- Insert sample data (optional)
INSERT INTO public.organs (token_id, organ_type, blood_type, status, donor, hospital, recipient, created_at)
VALUES
    (0, 'Heart', 'A+', 'Donated', '0x1111111111111111111111111111111111111111', NULL, NULL, NOW() - INTERVAL '2 days'),
    (1, 'Kidney', 'B-', 'Transferred', '0x2222222222222222222222222222222222222222', '0x3333333333333333333333333333333333333333', NULL, NOW() - INTERVAL '1 day'),
    (2, 'Liver', 'O+', 'Transplanted', '0x4444444444444444444444444444444444444444', '0x5555555555555555555555555555555555555555', '0x6666666666666666666666666666666666666666', NOW() - INTERVAL '3 hours');

-- Set next token_id sequence value
SELECT setval('public.organs_id_seq', (SELECT MAX(id) FROM public.organs) + 1);
